{"version":3,"sources":["firebase.js","Components/SearchBar.js","Components/Results.js","Components/Timeline.js","Components/Header.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SearchBar","props","className","id","onSubmit","handleSubmit","htmlFor","type","name","value","onChange","handleChange","required","onClick","scroller","scrollTo","validEntry","duration","delay","smooth","aria-label","Results","console","log","arrSlice","map","obj","index","key","src","url","alt","title","e","onSelect","handleClick","Timeline","removePost","postKey","database","ref","child","remove","state","firebaseData","on","res","a","newState","data","val","push","gifObj","setState","fbDataArr","this","slice","reverse","position","date","iconStyle","background","color","word","Component","Header","activeClass","to","spy","Footer","href","App","getGif","userInput","searchPhrase","axios","get","then","gifsArr","gifsArray","gifsUrlArr","forEach","images","fixed_height","length","swal","toSlice","submitInput","offset","validate","targetValue","target","charAt","toUpperCase","preventDefault","test","input","offsetNum","moment","format","handleSelection","handleRegenerate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gVAaAA,IAASC,cAVM,CACbC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAKMR,QAAf,E,wBCZe,SAASS,EAAUC,GAQhC,OACE,6BAASC,UAAU,YAAYC,GAAG,aAChC,yBAAKD,UAAU,WACb,0BAAME,SAAUH,EAAMI,cACpB,2BAAOC,QAAQ,cACb,yEAA8C,0BAAMJ,UAAU,kBAAhB,OAA9C,OAA6F,0BAAMA,UAAU,kBAAhB,OAA7F,WAEA,2BACEK,KAAK,OACLC,KAAK,aACLL,GAAG,aACHM,MAAOR,EAAMQ,MACbC,SAAUT,EAAMU,aAChBC,UAAQ,IAEV,4BAAQC,QAtBK,WACrBC,WAASC,SAASd,EAAMe,WAAY,CAClCC,SAAU,IACVC,MAAO,EACPC,OAAQ,oBAkB+BZ,KAAK,UAAS,0BAAML,UAAU,gBAAgBkB,aAAW,SAASX,MAAM,eCatGY,MAnCf,SAAiBpB,GAUhB,OADAqB,QAAQC,IAAItB,EAAMe,YAEjB,6BAASd,UAAU,UAAUM,KAAK,WACjC,yBAAKN,UAAU,WACd,uCAAY,0BAAMA,UAAU,kBAAhB,OAAZ,0CACA,wBAAIA,UAAU,eACZD,EAAMuB,SAASC,KAAI,SAACC,EAAKC,GACzB,OACC,wBAAIC,IAAKD,EAAOzB,UAAU,QACzB,yBAAKA,UAAU,WAAf,KACA,yBAAK2B,IAAKH,EAAII,IAAKC,IAAKL,EAAIM,MAAOnB,QAAS,SAACoB,GAC5ChC,EAAMiC,SAASD,GAlBtBnB,WAASC,SAAS,WAAY,CAC7BE,SAAU,IACVC,MAAO,EACPC,OAAQ,2BAqBP,yBAAKjB,UAAU,sBACd,uDACA,4BAAQW,QAASZ,EAAMkC,aAAvB,kB,QC8CUC,G,wDArEd,aAAe,IAAD,8BACb,gBAqBDC,WAAa,SAACC,GACC/C,EAASgD,WAAWC,MAC5BC,MAAMH,GAASI,UAtBrB,EAAKC,MAAQ,CACZC,aAAc,IAHF,E,gEAQO,IAAD,OACLrD,EAASgD,WAAWC,MAC5BK,GAAG,QAAT,uCAAkB,WAAOC,GAAP,mBAAAC,EAAA,sDAGjB,IAASnB,KAFHoB,EAAW,GACXC,EAAOH,EAAII,MAEhBF,EAASG,KAAK,CAAEvB,IAAKA,EAAKwB,OAAQH,EAAKrB,KAJvB,gBAMX,EAAKyB,SAAS,CACnBT,aAAcI,IAPE,2CAAlB,yD,+BAiBS,IAAD,OAGFM,EAAYC,KAAKZ,MAAMC,aAAaY,MAAM,GAAGC,UACnD,OACC,6BAASvD,UAAU,WAAWM,KAAK,YAClC,yBAAKN,UAAU,WACd,0CACA,4BACEoD,EAAU7B,KAAI,SAACC,EAAKC,GACpB,OACC,yBAAKzB,UAAU,gBACd,kBAAC,mBAAD,KACC,wBAAI0B,IAAKF,EAAIE,KACZ,kBAAC,0BAAD,CACC1B,UAAU,kCACVwD,SAAU/B,EAAQ,IAAM,EAAI,OAAS,QACrCgC,KAAMjC,EAAI0B,OAAOO,KACjBC,UAAW,CACVC,WAAY,UACZC,MAAO,SAGR,0DACA,wBAAI5D,UAAU,mCACZwB,EAAI0B,OAAOW,MAEb,4BAAQ7D,UAAU,aAAaW,QAAS,WAAQ,EAAKwB,WAAWX,EAAIE,OAAQ,0BAAM1B,UAAU,mBAAmBkB,aAAW,iBAC1H,yBAAKS,IAAKH,EAAI0B,OAAOtB,IAAKC,IAAKL,EAAI0B,OAAOrB,oB,GAxD/BiC,cCiCRC,MAtCf,WAUE,OACE,gCACE,yBAAK/D,UAAU,WACb,uBAAGA,UAAU,eAAeW,QAXT,WACvBC,WAASC,SAAS,WAAY,CAC5BE,SAAU,IACVC,MAAO,EACPC,OAAQ,qBAOiD,0BAAMjB,UAAU,qBAAvE,oBACA,yBAAKA,UAAU,kBACb,+CACA,8DACA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,kBACf,0BAAMA,UAAU,4BAChB,0BAAMA,UAAU,uBAChB,0BAAMA,UAAU,0BAChB,0BAAMA,UAAU,2BAChB,0BAAMA,UAAU,6BAChB,0BAAMA,UAAU,0BAItB,kBAAC,OAAD,CAAMgE,YAAY,SAASC,GAAG,YAAYC,KAAK,EAAMjD,QAAQ,EAAMF,SAAU,KAC3E,mDCtBKoD,MAVf,WACE,OACE,gCACE,yBAAKnE,UAAU,WACb,yCAAc,uBAAGoE,KAAK,4BAAR,gBAAd,gBC+HOC,G,wDAzHd,WAAYtE,GAAQ,IAAD,8BAClB,cAAMA,IAYPuE,OAbmB,uCAaV,WAAOC,GAAP,eAAA1B,EAAA,sDACI,mCACN2B,EAAeD,EACP,KACdE,IACEC,IADF,uDAHY,mCAGZ,cAE2DF,EAF3D,kBADc,OAKZG,MAAK,SAAC/B,GACN,IAAMgC,EAAUhC,EAAIG,KAAKA,KACzB,EAAKI,SAAS,CACb0B,UAAWD,IAEZ,IAAME,EAAa,GASnB,GANAF,EAAQG,SAAQ,SAAC7B,GAChB4B,EAAW7B,KAAK,CACfrB,IAAKsB,EAAO8B,OAAOC,aAAarD,IAChCE,MAAOoB,EAAOpB,WAGU,IAAtBgD,EAAWI,OACdC,IAAK,iBAAkB,oBAAqB,aAExC,CAEJ,EAAKhC,SAAS,CACb2B,eAGD,IAAMM,EAAUN,EAAWxB,MAAM,EAAG,GAGpC,EAAKH,SAAS,CACbiC,gBAnCI,2CAbU,sDAElB,EAAK3C,MAAQ,CACZlC,MAAO,GACP8E,YAAa,GACbR,UAAW,GACXS,OAAQ,EACRR,WAAY,GACZM,QAAS,GACTG,UAAU,GATO,E,yDAqDNxD,GACZ,IAAMyD,EAAczD,EAAE0D,OAAOlF,MAAMmF,OAAO,GAAGC,cAAgB5D,EAAE0D,OAAOlF,MAAM+C,MAAM,GAClFD,KAAKF,SAAS,CAAE5C,MAAOiF,M,mCAEXzD,GACZA,EAAE6D,iBAEF,GADY,2BACJC,KAAKxC,KAAKZ,MAAMlC,OACvB,CACC,IAAMuF,EAAQzC,KAAKZ,MAAMlC,MACzB8C,KAAKiB,OAAOwB,GACZzC,KAAKF,SAAS,CAAEkC,YAAaS,EAAOP,UAAU,SAG9CJ,IAAK,oBAAqB,oBAAqB,QAC/C9B,KAAKF,SAAS,CAAEoC,UAAU,M,uCAGZxD,GAChBA,EAAE6D,iBACF,IAAIG,EAAY1C,KAAKZ,MAAM6C,OAAS,EACpC,GAAIS,GAAa1C,KAAKZ,MAAMqC,WAAWI,OACtCC,IAAK,0BAA2B,4BAA6B,eAEzD,CACJ,IAAM7D,EAAW+B,KAAKZ,MAAMqC,WAAWxB,MAAMyC,EAAW,EAAIA,GAC5D1C,KAAKF,SAAS,CACbmC,OAAQS,EACRX,QAAS9D,O,sCAOIS,GACf,IAAMH,EAAMG,EAAE0D,OAAO9D,IACfE,EAAME,EAAE0D,OAAO5D,IACfgC,EAAOR,KAAKZ,MAAM4C,YAClB5B,EAAOuC,MAASC,OAAO,MACf5G,EAASgD,WAAWC,MAC5BW,KAAK,CAAErB,IAAKA,EAAKiC,KAAMA,EAAMJ,KAAMA,EAAM5B,IAAKA,M,+BAE3C,IAAD,OACR,OACC,yBAAK7B,UAAU,OACd,kBAAC,EAAD,MACA,kBAACF,EAAD,CACCS,MAAO8C,KAAKZ,MAAMlC,MAClBe,SAAU+B,KAAKZ,MAAM2C,QACrBE,OAAQjC,KAAKZ,MAAM6C,OACnBnF,aAAc,SAAC4B,GAAD,OAAO,EAAK5B,aAAa4B,IACvCtB,aAAc,SAACsB,GAAD,OAAO,EAAKtB,aAAasB,IACvCjB,WAAYuC,KAAKZ,MAAM8C,SAAW,UAAY,YAG/C,kBAAC,EAAD,CACCjE,SAAU+B,KAAKZ,MAAM2C,QACrBE,OAAQjC,KAAKZ,MAAM6C,OACnBtD,SAAU,SAACD,GAAD,OAAO,EAAKmE,gBAAgBnE,IACtCE,YAAa,SAACF,GAAD,OAAO,EAAKoE,iBAAiBpE,MAE3C,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GArHc+B,cCCEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhG,QAAQgG,MAAMA,EAAMC,c","file":"static/js/main.2230141b.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyAWFS5pX8FKAB73FR2J_P1LPpBzPC1DIII\",\r\n  authDomain: \"giphy-sentiment.firebaseapp.com\",\r\n  databaseURL: \"https://giphy-sentiment.firebaseio.com\",\r\n  projectId: \"giphy-sentiment\",\r\n  storageBucket: \"giphy-sentiment.appspot.com\",\r\n  messagingSenderId: \"988227217593\",\r\n  appId: \"1:988227217593:web:4fe5912e14eee25edbd368\"\r\n};\r\n\r\nfirebase.initializeApp(config)\r\n\r\nexport default firebase;","import React from 'react';\r\nimport {Element, Events, animateScroll as scroll, scrollSpy, scroller} from 'react-scroll';\r\n\r\nexport default function SearchBar(props) {\r\n  const scrollToButton = () => {\r\n    scroller.scrollTo(props.validEntry, {\r\n      duration: 1000,\r\n      delay: 0,\r\n      smooth: \"easeInOutQuart\",\r\n    });\r\n  };\r\n  return (\r\n    <section className=\"searchbar\" id=\"searchbar\">\r\n      <div className=\"wrapper\">\r\n        <form onSubmit={props.handleSubmit}>\r\n          <label htmlFor=\"searchterm\">\r\n            <p>Describe how you are feeling today in just <span className=\"specialStyling\">ONE</span> or <span className=\"specialStyling\">TWO</span> words</p>\r\n          </label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"searchterm\"\r\n              id=\"searchterm\"\r\n              value={props.value}\r\n              onChange={props.handleChange}\r\n              required\r\n            />\r\n            <button onClick={scrollToButton} type=\"submit\"><span className=\"fas fa-search\" aria-label=\"search\" value=\"&#xf002;\"></span></button>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Element, Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll'\r\n\r\n\r\nfunction Results(props) {\r\n\tconst scrollToButton = () => {\r\n\t\tscroller.scrollTo(\"timeline\", {\r\n\t\t\tduration: 1000,\r\n\t\t\tdelay: 0,\r\n\t\t\tsmooth: \"easeInOutQuart\",\r\n\t\t});\r\n\t};\r\n\r\n\tconsole.log(props.validEntry);\r\n\treturn (\r\n\t\t<section className=\"results\" name=\"results\">\r\n\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t<p>Choose a <span className=\"specialStyling\">GIF</span> that best suits your current emotion:</p>\r\n\t\t\t\t<ul className=\"resultsList\">\r\n\t\t\t\t\t{props.arrSlice.map((obj, index) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<li key={index} className=\"card\">\r\n\t\t\t\t\t\t\t\t<div className=\"overlay\">+</div>\r\n\t\t\t\t\t\t\t\t<img src={obj.url} alt={obj.title} onClick={(e) => {\r\n\t\t\t\t\t\t\t\t\tprops.onSelect(e)\r\n\t\t\t\t\t\t\t\t\tscrollToButton()}} />\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t\t<div className=\"regenerateContents\">\r\n\t\t\t\t\t<p>Don't like what you see?</p>\r\n\t\t\t\t\t<button onClick={props.handleClick}>Regenerate</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from 'react';\r\nimport firebase from '../firebase';\r\nimport {\r\n\tVerticalTimeline,\r\n\tVerticalTimelineElement,\r\n} from 'react-vertical-timeline-component';\r\nimport 'react-vertical-timeline-component/style.min.css';\r\n\r\nclass Timeline extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tfirebaseData: [],\r\n\t\t};\r\n\t}\r\n\r\n\t// Retreiving live data from Firebase to display gifs mood timeline\r\n\tcomponentDidMount() {\r\n\t\tconst dbRef = firebase.database().ref();\r\n\t\tdbRef.on('value', async (res) => {\r\n\t\t\tconst newState = [];\r\n\t\t\tconst data = res.val();\r\n\t\t\tfor (let key in data) {\r\n\t\t\t\tnewState.push({ key: key, gifObj: data[key] });\r\n\t\t\t}\r\n\t\t\tawait this.setState({\r\n\t\t\t\tfirebaseData: newState,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tremovePost = (postKey) => {\r\n\t\tconst dbRef = firebase.database().ref();\r\n\t\tdbRef.child(postKey).remove();\r\n\t}\r\n\r\n\trender() {\r\n\t\t// Reversing array of {url, word, alt, date} obj so that timeline-\r\n\t\t// displays gifs from latest to oldest\r\n\t\tconst fbDataArr = this.state.firebaseData.slice(0).reverse();\r\n\t\treturn (\r\n\t\t\t<section className=\"timeline\" name=\"timeline\">\r\n\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t<h2>2020 Feels</h2>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{fbDataArr.map((obj, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div className=\"timelineWrap\">\r\n\t\t\t\t\t\t\t\t\t<VerticalTimeline>\r\n\t\t\t\t\t\t\t\t\t\t<li key={obj.key}>\r\n\t\t\t\t\t\t\t\t\t\t\t<VerticalTimelineElement\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"vertical-timeline-element--work\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tposition={index % 2 === 0 ? 'left' : 'right'}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdate={obj.gifObj.date}\r\n\t\t\t\t\t\t\t\t\t\t\t\ticonStyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbackground: '#8df8b7',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#fff',\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>On this day, I was feeling:</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"vertical-timeline-element-title\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{obj.gifObj.word}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"removePost\" onClick={() => { this.removePost(obj.key) }}><span className=\"fas fa-trash-alt\" aria-label=\"delete post\"></span></button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={obj.gifObj.url} alt={obj.gifObj.alt} />\t\r\n\t\t\t\t\t\t\t\t\t\t\t</VerticalTimelineElement>\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t</VerticalTimeline>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\t\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Timeline;\r\n","import React from 'react';\r\nimport { Link, Element, Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll'\r\n\r\nfunction Header() {\r\n\r\n  const scrollToTimeline = () => {\r\n    scroller.scrollTo(\"timeline\", {\r\n      duration: 1000,\r\n      delay: 0,\r\n      smooth: \"easeInOutQuart\",\r\n    });\r\n  }  \r\n\r\n  return (\r\n    <header>\r\n      <div className=\"wrapper\">\r\n        <a className=\"timelineLink\" onClick={scrollToTimeline}><span className=\"fas fa-hourglass\"></span>Head To Timeline</a>\r\n        <div className=\"headerContents\">\r\n          <h1>Giphy Sentiment</h1>\r\n          <p>Turning your emotions into GIFs</p>\r\n          <div className=\"logo\">\r\n            <div className=\"line\">\r\n              <div className=\"triangleLeft\"></div>\r\n              <div className=\"triangleRight\"></div>\r\n              <span className=\"fas fa-smile-beam emoji\"></span>\r\n              <span className=\"fas fa-tired emoji\"></span>\r\n              <span className=\"fas fa-sad-tear emoji\"></span>\r\n              <span className=\"fas fa-meh-blank emoji\"></span>\r\n              <span className=\"fas fa-grin-hearts emoji\"></span>\r\n              <span className=\"fas fa-angry emoji\"></span>\r\n            </div>\r\n          </div>\r\n        </div>  \r\n        <Link activeClass=\"active\" to=\"searchbar\" spy={true} smooth={true} duration={1000}>\r\n          <button>Get Started</button>\r\n        </Link>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n      <div className=\"wrapper\">\r\n        <p>Created at <a href=\"https://junocollege.com/\">Juno College</a> ©2020</p>\r\n      </div>\r\n    </footer>  \r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport firebase from './firebase';\r\nimport swal from 'sweetalert';\r\nimport SearchBar from './Components/SearchBar';\r\nimport Results from './Components/Results';\r\nimport Timeline from './Components/Timeline';\r\nimport Header from './Components/Header';\r\nimport Footer from './Components/Footer';\r\nimport './styles/App.css';\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tvalue: '',\r\n\t\t\tsubmitInput: '',\r\n\t\t\tgifsArray: [],\r\n\t\t\toffset: 0,\r\n\t\t\tgifsUrlArr: [],\r\n\t\t\ttoSlice: [],\r\n\t\t\tvalidate: false,\r\n\t\t};\r\n\t}\r\n\t// Method for API call when user submits a mood query\r\n\tgetGif = async (userInput) => {\r\n\t\tconst key = 'e6I6PjSAevodOVfP9kWE6ivjPXnDObA6';\r\n\t\tconst searchPhrase = userInput;\r\n\t\tconst limit = '25';\r\n\t\taxios\r\n\t\t\t.get(\r\n\t\t\t\t`https://api.giphy.com/v1/gifs/search?api_key=${key}&q=${searchPhrase}&limit=${limit}`\r\n\t\t\t)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconst gifsArr = res.data.data;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tgifsArray: gifsArr,\r\n\t\t\t\t});\r\n\t\t\t\tconst gifsUrlArr = [];\r\n\t\t\t\t// Creating an array of objects\r\n\t\t\t\t// Each obj contains k/v pair of url & title (for alt attribute)\r\n\t\t\t\tgifsArr.forEach((gifObj) => {\r\n\t\t\t\t\tgifsUrlArr.push({\r\n\t\t\t\t\t\turl: gifObj.images.fixed_height.url,\r\n\t\t\t\t\t\ttitle: gifObj.title,\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\tif (gifsUrlArr.length === 0) {\r\n\t\t\t\t\tswal(\"No GIFs found.\", \"Please try again!\", \"error\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Storing array of {url, title} objects in state\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tgifsUrlArr,\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// Creating an array of the first 5 {url, title} obj\r\n\t\t\t\t\tconst toSlice = gifsUrlArr.slice(0, 5);\r\n\t\t\t\t\t// Storing array of 5 {url, title} obj to state\r\n\t\t\t\t\t// This will then be passed as props to Results comp for display\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\ttoSlice,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t};\r\n\thandleChange(e) {\r\n\t\tconst targetValue = e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1)\r\n\t\tthis.setState({ value: targetValue });\r\n\t}\r\n\thandleSubmit(e) {\r\n\t\te.preventDefault();\r\n\t\tconst reg = /^\\s*([a-zA-Z]+\\s*){1,2}$/\r\n\t\tif (reg.test(this.state.value))\r\n\t\t\t{\r\n\t\t\t\tconst input = this.state.value\r\n\t\t\t\tthis.getGif(input);\r\n\t\t\t\tthis.setState({ submitInput: input, validate: true })\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tswal(\"Please only enter\", \"ONE or TWO words.\", \"info\")\r\n\t\t\t\tthis.setState({ validate: false })\r\n\t\t\t}\r\n\t}\r\n\thandleRegenerate(e) {\r\n\t\te.preventDefault();\r\n\t\tlet offsetNum = this.state.offset + 5;\r\n\t\tif (offsetNum >= this.state.gifsUrlArr.length) {\r\n\t\t\tswal(\"There are no more GIFs.\", \"Please search a new word!\", \"warning\")\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst arrSlice = this.state.gifsUrlArr.slice(offsetNum, 5 + offsetNum);\r\n\t\t\tthis.setState({\r\n\t\t\t\toffset: offsetNum,\r\n\t\t\t\ttoSlice: arrSlice,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t// Creating a handle that extracts all data of gif user selects-\r\n\t// and stores to Firebase with each gif being represented as an-\r\n\t// obj of {url, word, date, alt} (word being the mood query user entered)\r\n\thandleSelection(e) {\r\n\t\tconst url = e.target.src;\r\n\t\tconst alt = e.target.alt;\r\n\t\tconst word = this.state.submitInput;\r\n\t\tconst date = moment().format('LL');\r\n\t\tconst dbRef = firebase.database().ref();\r\n\t\tdbRef.push({ url: url, word: word, date: date, alt: alt });\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Header />\r\n\t\t\t\t<SearchBar\r\n\t\t\t\t\tvalue={this.state.value}\r\n\t\t\t\t\tarrSlice={this.state.toSlice}\r\n\t\t\t\t\toffset={this.state.offset}\r\n\t\t\t\t\thandleSubmit={(e) => this.handleSubmit(e)}\r\n\t\t\t\t\thandleChange={(e) => this.handleChange(e)}\r\n\t\t\t\t\tvalidEntry={this.state.validate ? \"results\" : \"INVALID\"}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Results\r\n\t\t\t\t\tarrSlice={this.state.toSlice}\r\n\t\t\t\t\toffset={this.state.offset}\r\n\t\t\t\t\tonSelect={(e) => this.handleSelection(e)}\r\n\t\t\t\t\thandleClick={(e) => this.handleRegenerate(e)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Timeline />\r\n\t\t\t\t<Footer />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}